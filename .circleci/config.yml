version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name uda-backend-<< parameters.workflow_id >> \
            --region us-east-1
            #aws s3 rm s3://uda-<< parameters.workflow_id >>  --recursive 
            aws cloudformation delete-stack \
            --stack-name uda-frontend-<< parameters.workflow_id >> \
            --region us-east-1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          working_directory: ./backend
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/5FZ3YXuThLcyRTSihrqo3e/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              npm install
              npm run migrations:revert
            fi
          
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install --no-save
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-{{ checksum "backend/package.json" }}
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ checksum "backend/package.json"}}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-{{ checksum "backend/package.json" }}
      - run: 
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test

            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyse frontend
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-{{ checksum "backend/package.json" }}
      - run:
          name: Analyse backend
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeopleBackend \
              --stack-name uda-backend-${CIRCLE_WORKFLOW_ID:0:7}\
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            ls -a .
            touch ./.circleci/ansible/inventory.txt
            echo "[web]" > ./.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters 'Name=tag:Project, Values=UdaPeopleBackend' \
              --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - save_cache: 
          key: inventory-file-{{ .Revision }}
          paths: 
            - ./.circleci/ansible/inventory.txt
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeopleFrontend \
              --stack-name uda-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install aws
          command: |
            apk add --update ansible tar curl gzip
            pip install awscli
            aws --version
      - add_ssh_keys: 
          fingerprints: 
            - "93:c6:07:20:b2:a3:f5:d8:39:28:d3:4f:aa:f0:d9:91"
      - restore_cache:
          keys: 
            - inventory-file-{{ .Revision }}        
      - run:
          name: Configure server
          command: |
            apk add --update ansible
            ansible --version
            cd ./.circleci/ansible
            ls -a .
            ansible-playbook -e ansible_python_interpreter=/usr/bin/python2 -i inventory.txt configure-server.yml     
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install aws
          command: |
            mkdir -p tmp
            cd tmp
            apk add --update ansible tar curl nodejs npm gzip
            pip install awscli
            aws --version
      - restore_cache:
          keys: 
            - backend-build-{{ checksum "backend/package.json" }}
      - run:
          working_directory: ./backend
          name: Run migrations
          command: |
            # Your code here
            npm install --silent
            # add environment variables to server
            echo NODE_ENV=production > ~/project/backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ~/project/backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ~/project/backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ~/project/backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ~/project/backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ~/project/backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ~/project/backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ~/project/backend/.env
            cat ~/project/backend/.env
            npm run migrations --force > migration_status.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          working_directory: ./backend
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/5FZ3YXuThLcyRTSihrqo3e/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              else
                echo "DB migration failed!"
                curl -k "https://kvdb.io/5FZ3YXuThLcyRTSihrqo3e/migration_${CIRCLE_WORKFLOW_ID:0:7}" -d '0'
              fi
      # Here's where you will add some code to rollback on failure    
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install aws and dep
          command: |
            mkdir -p tmp
            cd tmp
            yum update -y
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_14.x |  bash -
            yum install -y nodejs
            aws --version
      - restore_cache:
          keys: 
            - inventory-file-{{ .Revision }}
      - run:
          name: Get backend url
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters 'Name=tag:Project, Values=UdaPeopleBackend' --output text > i.txt
            export BACKEND_IP=$(cat i.txt)
            rm i.txt
            echo "http://${BACKEND_IP}:3030"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            curl -k https://kvdb.io/5FZ3YXuThLcyRTSihrqo3e/udaBackendUrl_${CIRCLE_WORKFLOW_ID:0:7} -d "http://${BACKEND_IP}:3030"
      - run:
          name: Deploying frontend objects to S3
          command: |
            cd frontend/
            cat .env
            npm install --silent
            npm run build
            ls -a .
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://uda-${CIRCLE_WORKFLOW_ID:0:7}" --recursive   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
    
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: 
            - "93:c6:07:20:b2:a3:f5:d8:39:28:d3:4f:aa:f0:d9:91"
      - restore_cache:
          keys: 
            - inventory-file-{{ .Revision }}
      - run:
          name: Install aws and dep
          command: |
            mkdir -p tmp
            cd tmp
            apk add --update ansible tar curl nodejs npm gzip tree
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          command: |
            cd backend/
            npm install --silent
            npm run build
            set ANSIBLE_ROLE='./.circleci/ansible/roles'
            mkdir -p ${ANSIBLE_ROLE}/deploy/files
            cp -r --parents dist/ ${ANSIBLE_ROLE}/deploy/files/
            cd ../
            tree ${ANSIBLE_ROLE}/deploy
            ls -a .
            ansible-playbook -e ansible_python_interpreter=/usr/bin/python2 -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            set API_URL=$(curl --insecure https://kvdb.io/5FZ3YXuThLcyRTSihrqo3e/udaBackendUrl_${CIRCLE_WORKFLOW_ID:0:7})
      - run:
          name: Backend smoke test.
          command: |
            echo ${API_URL}
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            set URL="http://uda-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  cloudfront-update:
    docker:
      - image: aws/cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #    filters:
      #      branches:
      #        only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
